#!/usr/bin/env python3

import asyncio
import contextlib
import json
import os
import re
import socket
import struct
import sys
import syslog

from typing import *

import epipynet.detect


SEARCH_NETWORKS_PATH = '/usr/share/epipynet/search-networks'
SEARCH_NETWORKS_TEST_PATH = 'share/search-networks'
CONFIG_PATH = '/var/lib/epipynet/config.json'
TEST_CONFIG_PATH = '/tmp/epipynet/config.json'
EPIPYNET_SOCKET_PATH = '/var/run/epipynet/epipynet.sock'

ETH_LINK_NAME = 'eth0'
DHCP_SCAN_TIME = 5 * 60  # Scan every five minutes

TestMode = 'EPIPYNET_TEST' in os.environ


#  This nonsense is because Python 3.4.2 lacks ensure_future,
#  but has async, however, mypy 0.470 understands ensure_future,
#  but not async.
try:
    ensure_future = asyncio.ensure_future
except AttributeError:
    ensure_future = getattr(asyncio, 'async')


def configure_network(
        network: epipynet.detect.NetworkTuple) -> None:

    'We found a local network.  Update our configuration.'

    syslog.syslog('configuring network')
    syslog.syslog('network address is ' + network[0])
    syslog.syslog('network mask is ' + network[1])
    syslog.syslog('network gateway is ' + network[2])

    config = {
        'host_address': network[0],
        'netmask': network[1],
        'gateway': network[2],
    }

    config_json = json.dumps(config, sort_keys=True, indent=4)

    if TestMode:
        config_path = TEST_CONFIG_PATH
    else:
        config_path = CONFIG_PATH

    with contextlib.suppress(FileExistsError):
        os.mkdir(os.path.dirname(config_path))

    tmp_filename = config_path + '.tmp.' + str(os.getpid())

    with open(tmp_filename, 'w') as tmp:
        tmp.write(config_json + '\n')

    os.rename(tmp_filename, config_path)

    if not TestMode:
        if os.system('epipynet-apply-config'):
            syslog.syslog('epipynet-apply-config failed')


def network_device_up(
        device: str) -> None:

    'Set the ethernet device to up so we can ARP'

    if TestMode:
        return

    if os.system('ip link set ' + device + ' up'):
        syslog.syslog('Failed to set network up')
        sys.exit(1)


def network_device_down(
        device: str) -> None:

    'Set the ethernet device to down if we are exiting'

    if TestMode:
        return

    if os.system('ip link set ' + device + ' down'):
        syslog.syslog('Failed to set network down\n')


def stop_dnsmasq() -> None:

    'Stop the dnsmasq service, so we can do DHCP without it responding'

    os.system('systemctl stop dnsmasq')


def slash_to_netmask(
        slash_value: int) -> str:

    'Convert subnet slash notation (i.e. "/24") to a subnet mask'

    netmask_int = (1 << 32) - (1 << (32 - slash_value))
    netmask_bits = struct.pack('!I', netmask_int)
    return socket.inet_ntoa(netmask_bits)


def read_search_networks() -> List[epipynet.detect.NetworkTuple]:

    'Read the list of networks to search for from file'

    subnet_re = r'([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/([0-9]+)'

    networks = []  # type: List[epipynet.detect.NetworkTuple]
    line_number = 0

    if TestMode:
        search_file_path = SEARCH_NETWORKS_TEST_PATH
    else:
        search_file_path = SEARCH_NETWORKS_PATH

    with open(search_file_path) as networks_file:
        for line in networks_file:
            line_number += 1
            line = line.split('#')[0].strip()

            if len(line) == 0:
                continue

            match = re.match(subnet_re, line)
            if not match:
                syslog.syslog(
                    'error in search-networks on line ' +
                    str(line_number) + '\n')
                continue

            address = match.group(1)
            slash_value = int(match.group(2))

            networks.append((
                None,
                slash_to_netmask(slash_value),
                address))

    return networks


class NetworkStatus(object):

    'A tracker for the current status of the network'

    def __init__(
            self,
            interface_name: str,
            event_loop: asyncio.AbstractEventLoop) -> None:

        self.interface_name = interface_name  # type: str
        self.event_loop = event_loop  # type: asyncio.AbstractEventLoop
        self.network = None  # type: epipynet.detect.NetworkTuple

        self.dhcp_scan = None  # type: asyncio.Future
        self.dhcp_scan_complete = False  # type: bool
        self.dhcp_server = None  # type: str

    def start_network_detect(
            self,
            networks: Iterable[epipynet.detect.NetworkTuple]) -> None:

        '''Start the network detection process, storing the results
        in self.network upon completion'''

        try:
            network_future = epipynet.detect.detect_network(
                self.interface_name, self.event_loop, networks)
        except PermissionError:
            syslog.syslog('Permission denied for socket')
            sys.exit(1)

        def on_network_detect(
                future: asyncio.Future) -> None:

            self.network = future.result()
            configure_network(self.network)

            self.dhcp_scan = ensure_future(scan_for_dhcp_server(self))

        network_future.add_done_callback(on_network_detect)


@asyncio.coroutine
def detect_dhcp_server(
        network_status: NetworkStatus) -> Generator[Any, None, None]:

    network_status.dhcp_server = \
        yield from epipynet.detect.detect_dhcp_server(
            network_status.interface_name,
            network_status.network[0],
            network_status.event_loop)
    network_status.dhcp_scan_complete = True


@asyncio.coroutine
def scan_for_dhcp_server(
        network_status: NetworkStatus) -> Generator[Any, None, None]:

    '''Periodically scan for a DHCP server on the network.

    We do this as a separate coroutine so that the status report
    can complete immediately if there is no DHCP server found
    during the last scan.  Otherwise, refreshing the status would
    be a lengthy process of waiting for the DHCP scan to timeout
    when no server is present.'''

    while True:
        yield from detect_dhcp_server(network_status)
        yield from asyncio.sleep(DHCP_SCAN_TIME)


@asyncio.coroutine
def get_status_report(
        network_status: NetworkStatus) -> Generator[Any, None, Dict]:

    'Generate a report in response to a status request'

    network = network_status.network

    if network_status.dhcp_scan_complete and not network_status.dhcp_server:
        #  If our most recent DHCP scan indicated no DHCP server, we won't
        #  rescan, as it is unlikely one has just been added, and this will
        #  make the status web page more responsive
        dhcp_server = None
    else:
        #  If we recently found a DHCP server, rescan for the status request
        #  since the scan should complete quickly if the DHCP server
        #  still exists, and the user will want to refresh the status page
        #  to see that the DHCP server has been disabled
        yield from detect_dhcp_server(network_status)
        dhcp_server = network_status.dhcp_server

    if network:
        status = {
            'router_address': network[2],
            'subnet_mask': network[1],
            'dns_addresses': '8.8.4.4',
            'device_address': network[0],
            'dhcp_server': dhcp_server
        }
    else:
        status = {'err': 'no-network'}

    return status


class EpipynetProtocol(asyncio.Protocol):

    'Protocol for responding to requests from the Unix domain socket'

    def __init__(
            self,
            network_status: NetworkStatus) -> None:

        self.network_status = network_status  # type: NetworkStatus
        self.transport = None  # type: asyncio.Transport

    def connection_made(
            self,
            transport: asyncio.BaseTransport) -> None:

        'When a new connection is made, await a request command'

        self.transport = cast(asyncio.Transport, transport)

    def data_received(
            self,
            data: bytes) -> None:

        'Handle a request command by starting an appropriate coroutine'

        def write_result(
                result: Dict) -> None:

            result_bytes = json.dumps(result).encode('utf-8')
            self.transport.write(result_bytes + b'\n')
            self.transport.close()

        result = {'err': 'invalid-command'}
        if b'\n' in data:
            command = data.split(b'\n')[0].decode('utf-8')

            if command == 'status':
                status_future = None  # type: asyncio.Future

                status_future = ensure_future(
                    get_status_report(self.network_status))

                status_future.add_done_callback(
                    lambda future: write_result(future.result()))

                return

        write_result(result)


def start_epipynet_server(
        loop: asyncio.AbstractEventLoop,
        network_status: NetworkStatus) -> asyncio.AbstractServer:

    'Start a server object for handling requests via the Unix domain socket'

    with contextlib.suppress(FileExistsError):
        os.mkdir(os.path.dirname(EPIPYNET_SOCKET_PATH))

    with contextlib.suppress(FileNotFoundError):
        os.unlink(EPIPYNET_SOCKET_PATH)

    def create_protocol() -> EpipynetProtocol:
        return EpipynetProtocol(network_status)

    old_umask = os.umask(0)
    coro = loop.create_unix_server(create_protocol, EPIPYNET_SOCKET_PATH)
    server = loop.run_until_complete(coro)
    os.umask(old_umask)

    return server


def main() -> None:

    '''Scan for a local network, and configure the OS network interface
    when it is found.'''

    if TestMode:
        syslog.syslog('starting in test mode')
    else:
        syslog.syslog('starting')

    try:
        potential_networks = read_search_networks()
    except FileNotFoundError:
        syslog.syslog('search-networks missing')
        potential_networks = []

    with contextlib.closing(asyncio.get_event_loop()) as loop:
        network_status = NetworkStatus(ETH_LINK_NAME, loop)

        server = start_epipynet_server(loop, network_status)
        with contextlib.closing(server):
            network_device_up(ETH_LINK_NAME)
            stop_dnsmasq()
            network_status.start_network_detect(potential_networks)

            loop.run_forever()


if __name__ == '__main__':
    main()
