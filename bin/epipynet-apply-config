#!/usr/bin/env python3

import json
import os
import socket
import struct
import sys

from typing import *

CONFIG_PATH = '/var/lib/epipynet/config.json'
HOSTNAME_PATH = '/etc/hostname'
HOSTS_PATH = '/etc/hosts'
DNSMASQ_CONFIG_PATH = '/etc/dnsmasq.d/epipynet.conf'

ConfigDict = Dict[str, str]


def load_config(
        path: str) -> ConfigDict:

    'Load the JSON config file generated by epipynet-autoconfigure'

    try:
        config_file = open(path)
    except FileNotFoundError:
        sys.stderr.write(
            sys.argv[0] + ': failure to open configuration file\n')
        sys.exit(1)

    try:
        config_text = config_file.read()
    finally:
        config_file.close()

    try:
        config = json.loads(config_text)
    except ValueError as err:
        sys.stderr.write(sys.argv[0] + ': bad json - ' + str(err) + '\n')
        sys.exit(1)

    return config


def add_net_ip(
        device: str,
        config: ConfigDict) -> None:

    'Configure the ethernet device with the chosen IP address'

    try:
        addr = config['host_address']
    except KeyError:
        sys.stderr.write(sys.argv[0] + ': no host_address in config\n')
        sys.exit(1)

    os.system('ip address flush dev ' + device)
    if os.system('ip address add ' + addr + '/24 dev ' + device):
        sys.stderr.write(sys.argv[0] + ': unable to add device address\n')
        sys.exit(1)


def add_net_route(
        device: str,
        config: ConfigDict) -> None:

    'Add a default route to the local gateway'

    try:
        gateway = config['gateway']
    except KeyError:
        sys.stderr.write(sys.argv[0] + ': no gateway in config\n')
        sys.exit(1)

    if os.system('ip route replace default via ' + gateway + ' dev ' + device):
        sys.stderr.write(sys.argv[0] + ': unable to add default route\n')
        sys.exit(1)


def get_dhcp_range(
        config: ConfigDict) -> str:

    'Get the range of addresses to allocate vai DHCP for dnsmasq.conf'

    host_addr = socket.inet_aton(config['host_address'])
    netmask_value = socket.inet_aton(config['netmask'])

    host_int = struct.unpack('!I', host_addr)[0]
    netmask_int = struct.unpack('!I', netmask_value)[0]

    range_size = (1 << 32) - netmask_int
    subnet_min_addr = host_int & netmask_int
    subnet_max_addr = subnet_min_addr + range_size - 1

    min_addr = subnet_min_addr + (range_size // 16)
    max_addr = subnet_max_addr - (range_size // 16)

    min_text = socket.inet_ntoa(struct.pack('!I', min_addr))
    max_text = socket.inet_ntoa(struct.pack('!I', max_addr))

    return min_text + ',' + max_text


def generate_hosts_list(
        config: ConfigDict) -> None:

    'Generate /etc/hosts with our IP address associated with our hostname'

    try:
        with open(HOSTNAME_PATH) as hostname_file:
            hostname = hostname_file.readline().strip()
    except FileNotFoundError:
        hostname = None

    tmp_path = HOSTS_PATH + '.tmp.' + str(os.getpid())
    with open(tmp_path, 'w') as tmp:
        tmp.write('# generated by epipynet-apply-config\n')
        tmp.write('\n')
        tmp.write('127.0.0.1    localhost\n')

        if hostname:
            tmp.write(config['host_address'] + '    ' + hostname + '\n')

    os.rename(tmp_path, HOSTS_PATH)


def generate_dnsmasq_conf(
        config: ConfigDict) -> None:

    'Generate the dnsmasq config file from the autoconfigure values'

    tmp_path = DNSMASQ_CONFIG_PATH + '.tmp.' + str(os.getpid())
    with open(tmp_path, 'w') as tmp:
        tmp.write('# generated by epipynet-apply-config\n')
        tmp.write('\n')
        tmp.write('server=' + config['gateway'] + '\n')
        tmp.write('# Google provided DNS servers\n')
        tmp.write('server=8.8.8.8\n')
        tmp.write('server=8.8.4.4\n')
        tmp.write('\n')
        tmp.write('dhcp-range=' + get_dhcp_range(config) + ',1h\n')
        tmp.write('dhcp-option=3,' + config['gateway'] + '\n')
        tmp.write('\n')
        tmp.write('log-queries\n')
        tmp.write('log-async\n')

    os.rename(tmp_path, DNSMASQ_CONFIG_PATH)


def restart_services() -> None:

    'Restart DNSmasq as we have generated new configuration for it'

    os.system('systemctl try-restart dnsmasq')


def main() -> None:

    'Apply the configuration generated by epipynet-autoconfigure to the OS'

    config = load_config(CONFIG_PATH)
    add_net_ip('eth0', config)
    add_net_route('eth0', config)
    generate_hosts_list(config)
    generate_dnsmasq_conf(config)
    restart_services()


if __name__ == '__main__':
    main()
